#!/usr/bin/python
# coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: quantum_floating_ip
version_added: "1.2"
short_description: Add/Remove floating IP from an instance
description:
   - Add or Remove a floating IP to an instance
options:
   login_username:
     description:
        - login username to authenticate to keystone
     required: true
     default: admin
   login_password:
     description:
        - Password of login user
     required: true
     default: 'yes'
   login_tenant_name:
     description:
        - The tenant name of the login user
     required: true
     default: 'yes'
   auth_url:
     description:
        - The keystone url for authentication
     required: false
     default: 'http://127.0.0.1:35357/v2.0/'
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   network_name:
     description:
        - Name of the network from which IP has to be assigned to VM. Please make sure the network is an external network
     required: true
     default: None
   instance_name:
     description:
        - The name of the instance to which the IP address should be assigned
     required: true
     default: None
   internal_network_name:
     description:
        - The name of the network of the port to associate with the floating ip. Necessary when VM multiple networks.
     required: false
     default: None
requirements: ["novaclient", "quantumclient", "neutronclient", "keystoneclient"]
'''

EXAMPLES = '''
# Assign a floating ip to the instance from an external network
- quantum_floating_ip: state=present login_username=admin login_password=admin
                       login_tenant_name=admin network_name=external_network
                       instance_name=vm1 internal_network_name=internal_network
'''


def create_floating_ip(module, neutron, port_id, network_id):
    try:
        result = neutron.create_floatingip({'floatingip': {
            'port_id': port_id,
            'floating_network_id': network_id,
        }})
    except Exception, e:
        module.fail_json(msg="There was an error in updating the floating ip address: %s" % e.message)

    return result['floatingip']


def update_floating_ip(module, neutron, floating_ip_id, port_id=None):
    try:
        neutron.update_floatingip(floating_ip_id,
                                  {'floatingip': {'port_id': port_id}})
    except Exception, e:
        module.fail_json(
            msg="There was an error in updating the floating ip address: %s" % e.message)


def delete_floating_ip(module, neutron, floating_ip_id):
    try:
        neutron.delete_floatingip(floating_ip_id)
    except Exception, e:
        module.fail_json(
            msg="There was an error in updating the floating ip address: %s" % e.message)


def main():
    fixed_ip, port_id = _get_port_info(
        neutron, module, server_info['id'], module.params['internal_network_name'])
    if not port_id:
        module.fail_json(
            msg="Cannot find a port for this instance, maybe fixed ip is not assigned")

    floating_id, floating_ip = _get_floating_ip(module, neutron, fixed_ip)

    if module.params['state'] == 'present':
        if floating_ip:
            module.exit_json(changed=False, public_ip=floating_ip)
        net_id = _get_net_id(neutron, module)
        if not net_id:
            module.fail_json(
                msg="cannot find the network specified, please check")
        _create_floating_ip(neutron, module, port_id, net_id)

    if module.params['state'] == 'absent':
        if floating_ip:
            _update_floating_ip(neutron, module, floating_id, None)
        module.exit_json(changed=False)


def main():
    argument_spec = os_argument_spec()
    argument_spec.update(dict(
        network_name=dict(default=None),
        network_id=dict(default=None),
        instance_name=dict(default=None),
        instance_id=dict(default=None),
        tenant_id=dict(default=None),
        tenant_name=dict(default=None),
        floating_ip=dict(default=None),
        create_strategy=dict(default='new', choices=['reuse', 'new', 'reuse_or_new']),
        state=dict(default='present', choices=['absent', 'detached', 'present']),
        internal_network_name=dict(default=None),
        internal_network_id=dict(default=None),
    ))

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        mutually_exclusive=os_mutually_exclusive() + [
            ['internal_network_name', 'internal_network_id'],
            ['network_name', 'network_id', 'floating_ip'],
            ['instance_name', 'instance_id'],
            ['tenant_name', 'tenant_id'],
        ]
    )

    neutron = get_neutron_client(module)

    # validate:
    if not module.params['network_name'] and not module.params['network_id'] \
            and not module.params['floating_ip']:
        module.fail_json(msg="One of network_id, network_name or floating_ip is required.")

    if not module.params['internal_network_name'] and not module.params['internal_network_id']:
        module.fail_json(msg="either internal_network_id or internal_network_name is required.")

    if module.params['tenant_name']:
        tenant_id = get_tenant_id(module.params['tenant_name'])
    elif module.params['tenant_id']:
        tenant_id = module.params['tenant_id']
    else:
        tenant_id = None

    # tenant_id isn't used to get the 'floating network', as that's expected to
    # be a public network, reachable for all tenants.
    if module.params['network_id']:
        network_id = module.params['network_id']
    elif module.params['network_name']:
        network_id = get_network(module, name=module.params['network_name'],
                                 neutron=neutron)['id']
    else:
        network_id = None

    internal_network_id = (
        module.params['internal_network_id'] or
        get_network(module, name=module.params['internal_network_name'],
                    tenant_id=tenant_id, neutron=neutron)['id']
    )

    if module.params['instance_id']:
        server_id = module.params['instance_id']
    elif module.params['instance_name']:
        server_id = get_server(module, name=module.params['instance_name']).id

    if server_id:
        port = get_port(module, internal_network_id, server_id,
                        neutron=neutron)
        if not port:
            module.fail_json(msg="Cannot find a port for this instance, "
                                 "maybe fixed ip is not assigned")
        port_id = port['id']
    else:
        port_id = None

    if module.params['floating_ip']:
        floating_ips = neutron.list_floatingips(
            floating_ip_address=module.params['floating_ip'])
        if not floating_ips['floatingips']:
            module.fail_json(msg="Cannot find a port for this instance, "
                                 "maybe fixed ip is not assigned")
        floating_ip = floating_ips['floatingips'][0]

    elif server_id:
        # find address already associated with that server
        floating_ips = neutron.list_floatingips(port_id=port_id,
                                                floating_network_id=network_id)

        floating_ip = (floating_ips['floatingips'][0]
                       if floating_ips['floatingips'] else None)
    elif module.params['create_strategy'] == "reuse":
        # find address already associated with that server
        floating_ips = neutron.list_floatingips(port_id=None,
                                                floating_network_id=network_id)

        floating_ip = (floating_ips['floatingips'][0]
                       if floating_ips['floatingips'] else None)
    else:
        # We're going to work with a new floating ip
        floating_ip = None


    if module.params['state'] == 'present':
        if floating_ip and floating_ip['port_id'] == port_id:
            module.exit_json(changed=False, result="success",
                             public_ip=floating_ip['floating_ip_address'])

        if module.check_mode:
            module.exit_json(changed=True, result="success")

        if floating_ip:
            update_floating_ip(module, neutron, floating_ip['id'], port['id'])
            module.exit_json(changed=True, result="associated")

        if module.params['create_strategy'] in ('new', 'reuse_or_new'):
            floating_ip = create_floating_ip(module, neutron, port_id, 
                                             network_id)
            module.exit_json(changed=False, result="success",
                             public_ip=floating_ip['floating_ip_address'])

        module.fail_json(msg="No floating ip to assign")

    elif module.params['state'] == 'detached':
        if not floating_ip:
            module.exit_json(changed=False, result="success")
        elif module.check_mode:
            module.exit_json(changed=True, result="success")
        else:
            update_floating_ip(module, neutron, floating_ip['id'], None)
            module.exit_json(changed=True, result="detached")

    elif module.params['state'] == 'absent':
        if not floating_ip:
            module.exit_json(changed=False, result="success")
        elif module.check_mode:
            module.exit_json(changed=True, result="success")
        else:
            update_floating_ip(module, neutron, floating_ip['id'], None)
            delete_floating_ip(module, neutron, floating_ip['id'])
            module.exit_json(changed=True, result="deleted")


from ansible.module_utils.basic import *
from ansible.module_utils.openstack import *
if __name__ == '__main__':
    main()
