#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    try:
        from neutronclient.neutron import client
    except ImportError:
        from quantumclient.quantum import client
    from keystoneclient.v2_0 import client as ksclient
except ImportError:
    print("failed=True msg='quantumclient (or neutronclient) and keystone client are required'")

DOCUMENTATION = '''
---
module: quantum_router
version_added: "1.2"
short_description: Create or Remove router from openstack
description:
   - Create or Delete routers from OpenStack
options:
   login_username:
     description:
        - login username to authenticate to keystone
     required: true
     default: admin
   login_password:
     description:
        - Password of login user
     required: true
     default: 'yes'
   login_tenant_name:
     description:
        - The tenant name of the login user
     required: true
     default: 'yes'
   auth_url:
     description:
        - The keystone url for authentication
     required: false
     default: 'http://127.0.0.1:35357/v2.0/'
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   name:
     description:
        - Name to be give to the router
     required: true
     default: None
   tenant_name:
     description:
        - Name of the tenant for which the router has to be created, if none router would be created for the login tenant.
     required: false
     default: None
   admin_state_up:
     description:
        - desired admin state of the created router .
     required: false
     default: true
requirements: ["quantumclient", "neutronclient", "keystoneclient"]
'''

EXAMPLES = '''
# Creates a router for tenant admin
- quantum_router: state=present
                login_username=admin
                login_password=admin
                login_tenant_name=admin
                name=router1"
'''


def create_router(module, neutron, tenant_id=None):
    router = {
        'name': module.params['name'],
        'admin_state_up': module.params['admin_state_up'],
    }

    if tenant_id:
        router['tenant_id'] = tenant_id

    try:
        new_router = neutron.create_router(dict(router=router))
    except Exception, e:
        module.fail_json(msg="Error in creating router: %s" % e.message)

    return new_router['router']


def delete_router(module, neutron, router_id):
    try:
        neutron.delete_router(router_id)
    except:
        module.fail_json("Error in deleting the router")
    return True


def main():
    argument_spec = os_argument_spec()
    argument_spec.update(dict(
        name=dict(required=True),
        tenant_name=dict(default=None),
        tenant_id=dict(default=None),
        state=dict(default='present', choices=['absent', 'present']),
        admin_state_up=dict(type='bool', default=True),
    ))

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        mutually_exclusive=os_mutually_exclusive() + [
            ['tenant_name', 'tenant_id']
        ]
    )

    if module.params['tenant_name']:
        tenant_id = get_tenant_id(module.params['tenant_name'])
    elif module.params['tenant_id']:
        tenant_id = module.params['tenant_id']
    else:
        tenant_id = None

    neutron = get_neutron_client(module)

    router = get_router(module, module.params["name"], neutron=neutron)

    if module.params['state'] == 'present':
        if router:
            module.exit_json(changed=False, result="Success", id=router['id'])
        elif module.check_mode:
            module.exit_json(changed=True, result="Success")
        else:
            router = create_router(module, neutron, tenant_id)
            module.exit_json(changed=True, result="Created", id=router['id'])

    elif module.params['state'] == 'absent':
        if not router:
            module.exit_json(changed=False, result="Success")
        elif module.check_mode:
            module.exit_json(changed=True, result="Success")
        else:
            delete_router(module, neutron, router['id'])
            module.exit_json(changed=True, result="Deleted")


from ansible.module_utils.basic import *
from ansible.module_utils.openstack import *
if __name__ == '__main__':
    main()

