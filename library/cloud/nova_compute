#!/usr/bin/python
# coding: utf-8 -*-

# (c) 2014, Koert van der Veer <koert@cloudvps.com>
# (c) 2013, Benno Joy <benno@ansible.com>
# (c) 2013, John Dewey <john@dewey.ws>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

import time

DOCUMENTATION = '''
---
module: nova_compute
version_added: "1.2"
short_description: Create/Delete VMs from OpenStack
description:
   - Create or Remove virtual machines from Openstack.
options:
    auth_url:
        required: False
        description:
        - The (v2) authentication endpoint for keystone. If not set either the
          keystone_endpoint or the OS_AUTH_URL environment variable is used.
        default: http://127.0.0.1:5000/v2.0
    login_username:
        required: False
        description:
        - username to authenticate to keystone. If not set, the OS_USERNAME
          variable is used (if present).
        default: admin
    login_user:
        description:
        - DEPRECATED. Alias for login_username, for backward compatibility.
    login_password:
        required: False
        description:
        - password to authenticate to keystone. If not set, the OS_PASSWORD
          variable is used (if present).
    login_tenant_name:
        required: False
        default: admin
        description:
        - The tenant name to authenticate to keystone. If not set, the
          OS_TENANT_NAME variable is used (if present).
    token:
        required: False
        - Token to use as authentication. If used, you also need to provide
          an endpoint.
    login_tenant_id:
        required: False
        description:
        - The tenant id to authenticate to keystone. If not set, the
          OS_TENANT_ID variable is used (if present).
    ca_cert:
        required: False
        description:
        - Path to the CA certificates to use to validate certificates.
    insecure:
        default: False
        description:
        - If set to True, SSL certificates will not be checked.
    region_name:
        default: None
        description:
        - The region to use when selecting an endpoint from the service catalog
    endpoint_type:
        default: publicURL
        description:
        - The endpoint type to use when selecting an endpoint from the service
          catalog

    state:
        description:
        - Indicate desired state of the resource
        choices: ['present', 'absent']
        default: present
    name:
        description:
        - Name that has to be given to the instance
        required: true
        default: None
    image_id:
        description:
        - The id of the image that has to be cloned. One of image_id or 
          image_name is required.
        required: false
        default: None
    image_name:
        description:
        - The name of the image that has to be cloned. One of image_id or 
          image_name is required.
        required: false
        default: None
        version_added: "1.6"
    flavor_id:
        description:
        - The id of the flavor in which the new VM has to be created
        required: false
        default: 1
    flavor_name:
        description:
        - The name of the flavor in which the new VM has to be created.
        required: false
        version_added: "1.6"
    key_name:
        description:
        - The key pair name to be used when creating a VM
        required: false
        default: None
    security_groups:
        description:
        - A list of security groups to which the VM should be added
        required: false
        default: None
    availability_zone:
       version_added: "1.6"
       description:
          - The name of the availability zone to which the VM should be added
       required: false
       default: None
    nics:
        description:
        - A list of network id's to which the VM's interface should be attached
        required: false
        default: None
    volumes:
        version_added: "1.6"
        description:
          - A list of volumes to attach to the VM by name or ID
        required: false
        default: None
    meta:
        description:
        - A list of key value pairs that should be provided as a metadata to the new VM
        required: false
        default: None
    wait:
        description:
        - If the module should wait for the VM to be created.
        required: false
        default: 'yes'
    wait_for:
        description:
        - The amount of time the module should wait for the VM to get into active state
        required: false
        default: 180
    user_data:
        description:
        - Opaque blob of data which is made available to the instance
        required: false
        default: None
        version_added: "1.6"

requirements: ["novaclient"]
'''

EXAMPLES = '''
# Creates a new VM and attaches to a network and passes metadata to the instance
- nova_compute:
    state: present
    login_username: admin
    login_password: admin
    login_tenant_name: admin
    name: vm1
    image_id: 4f905f38-e52a-43d2-b6ec-754a13ffb529
    key_name: ansible_key
    wait_for: 200
    flavor_id: 4
    nics:
      - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723
    meta:
      hostname: test1
      group: uge_master
'''


def delete_server(module, nova, server):
    name = None
    server_list = None
    try:
        server_list = nova.servers.list(True, {'name': name})
        if server_list:
            server = [x for x in server_list if x.name == name]
            nova.servers.delete(server.pop())
    except Exception, e:
        module.fail_json(msg="Error in deleting vm: %s" % e.message)

    nova.servers.delete(server)

    if not module.params['wait']:
        module.exit_json(changed=True, result="deleted")

    expire = time.time() + int(module.params['wait_for'])
    while time.time() < expire:
        name = nova.servers.list(True, {'name': server['name']})
        if not name:
            module.exit_json(changed=True, result="deleted")
        time.sleep(5)

    module.fail_json(msg="Timed out waiting for server to get deleted, "
                         "please check manually")


def rebuild_server(module, nova, server, image_id):
    server.rebuild(image_id)

    state = get_server_state(module, nova, server)
    module.exit_json(changed=True, **state)


def create_server(module, nova, image_id, flavor_id):
    bootargs = [module.params['name'], image_id, flavor_id]

    security_groups = module.params['security_groups']
    security_groups = (security_groups.split(',')
                       if isinstance(security_groups, basestring)
                       else security_groups)

    nics = module.params['nics']
    nics = nics.split(',') if isinstance(nics, basestring) else nics

    if nics:
        for nic in nics:
            if "net-name" in nic:
                if "net-id" in nic:
                    module.fail_json(msg="net-id and net-name are mutually exclusive")
                nic['net-id'] = get_network(module, nic.pop('net-name'))['id']

    bootkwargs = {
        'nics': nics,
        'meta': module.params['meta'],
        'key_name': module.params['key_name'],
        'security_groups': security_groups,
        'availability_zone': module.params['availability_zone'],
        'userdata': module.params['user_data'],
    }

    if not module.params['key_name']:
        del bootkwargs['key_name']

    if module.params['volumes']:
        bdm = bootkwargs['block_device_mapping'] = {}
        device_names = iter("sda%s" % s for s in "abcdefghijklmnopqrstuvwxyz")
        for volume in module.params['volumes']:
            if 'name' in volume:
                if 'id' in volume:
                    module.fail_json(msg="id and name are mutially exclusive "
                                         "in volumes", name=volume['name'], id=volume['id'])

                if volume.get('type') == 'snap':
                    volume['id'] = get_snapshot(module, name=volume['name']).id
                else:
                    volume['id'] = get_volume(module, name=volume['name']).id
            elif 'id' not in volume:
                module.fail_json(msg="id, name or size are required for " 
                                     "volumes in volumes", name=volume['name'], id=volume['id'])


            mapping = "%s:%s:%s:%s" % (volume.get('id', ''),
                                       volume.get('type', 'volume'),
                                       volume.get('size', ''),
                                       volume.get('delete_on_termination'))

            device_name = volume.get('device_name') or next(device_names)

            bdm[device_name] = mapping

    try:
        server = nova.servers.create(*bootargs, **bootkwargs)
    except Exception, e:
        module.fail_json(msg="Error in creating instance: %s " % e.message)

    return server


def get_server_state(module, nova, server):

    if module.params['wait']:
        # We need to wait until the server is active
        expire = time.time() + float(module.params['wait_for'])
        while time.time() < expire:
            try:
                server = nova.servers.get(server.id)
            except Exception, e:
                module.fail_json(msg="Error in getting info from instance: %s " % e.message)

            if server.status in ('ACTIVE', 'ERROR'):
                break

            time.sleep(2)

        if server.status not in ('ACTIVE', 'ERROR'):
            module.fail_json(msg="Timeout waiting for the server to come up. "
                                 "Please check manually.")

    if server.status == 'ERROR':
        module.fail_json(msg="Server failed to boot. "
                             "Please check manually")

    addresses = server.addresses.values()

    if addresses:
        fixed_ips = [x['addr'] for x in addresses[0]
                     if x.get('OS-EXT-IPS:type') == 'fixed']
        floating_ips = [x['addr'] for x in addresses[0]
                        if x.get('OS-EXT-IPS:type') == 'floating']
    else:
        fixed_ips = []
        floating_ips = []

    return dict(id=server.id,
                # misnomer for backward compatibility
                private_ip=''.join(fixed_ips),
                public_ip=''.join(floating_ips),
                status=server.status,
                info=server._info)


def main():
    argument_spec = os_argument_spec()
    argument_spec.update(dict(
        name=dict(required=True),
        image_id=dict(default=None),
        image_name=dict(default=None),
        flavor_id=dict(default=1),
        flavor_name=dict(default=None),
        key_name=dict(default=None),
        security_groups=dict(default='default'),
        availability_zone=dict(default=None),
        nics=dict(default=None),
        meta=dict(default=None),
        volumes=dict(default=None),
        wait=dict(default='yes', type='bool'),
        wait_for=dict(default=180),
        user_data=dict(default=None),
        state=dict(default='present', choices=['absent', 'present'])
    ))

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        mutually_exclusive=os_mutually_exclusive() + [
            ['image_id', 'image_name'],
            ['flavor_id', 'flavor_name'],
        ]
    )

    nova = get_nova_client(module)
    server = get_server(module, name=module.params['name'], required=False,
                        nova=nova)

    if module.params['image_id']:
        image_id = module.params['image_id']
    elif module.params['image_name']:
        image_id = get_glance_image(module, module.params['image_name']).id
    elif module.param['state'] != 'absent':
        module.fail_json(msg="Parameter 'image_id' or 'image_name' is "
                             "required if state == 'present'")

    if module.params['flavor_name']:
        flavor_id = get_flavor(module, module.params['flavor_name']).id
    else:
        flavor_id = module.params['flavor_id']

    if module.params['state'] == 'present':
        if server:
            state = get_server_state(module, nova, server)
            module.exit_json(changed=False, **state)
        elif module.check_mode:
            module.exit_json(changed=True, **state)
        else:
            server = create_server(module, nova, image_id, flavor_id)
            state = get_server_state(module, nova, server)
            module.exit_json(changed=True, **state)

    elif module.params['state'] == 'absent':
        if not server:
            module.exit_json(changed=False)
        elif module.check_mode:
            module.exit_json(changed=True)
        else:
            delete_server(module, nova)
            module.exit_json(changed=True)

    elif module.params['state'] == 'rebuilt':
        if module.check_mode:
            module.exit_json(changed=True)
        elif server:
            rebuild_server(module, nova, server, image_id)
        else:
            create_server(module, nova, image_id)

from ansible.module_utils.basic import *
from ansible.module_utils.openstack import *
if __name__ == '__main__':
    main()
