#!/usr/bin/python
# coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: quantum_network
version_added: "1.4"
short_description: Creates/Removes networks from OpenStack
description:
   - Add or Remove network from OpenStack.
options:
   login_username:
     description:
        - login username to authenticate to keystone
     required: true
     default: admin
   login_password:
     description:
        - Password of login user
     required: true
     default: 'yes'
   login_tenant_name:
     description:
        - The tenant name of the login user
     required: true
     default: 'yes'
   tenant_name:
     description:
        - The name of the tenant for whom the network is created
     required: false
     default: None
   auth_url:
     description:
        - The keystone url for authentication
     required: false
     default: 'http://127.0.0.1:35357/v2.0/'
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   name:
     description:
        - Name to be assigned to the nework
     required: true
     default: None
   provider_network_type:
     description:
        - The type of the network to be created, gre, vlan, local. Available types depend on the plugin. The Quantum service decides if not specified.
     required: false
     default: None
   provider_physical_network:
     description:
        - The physical network which would realize the virtual network for flat and vlan networks.
     required: false
     default: None
   provider_segmentation_id:
     description:
        - The id that has to be assigned to the network, in case of vlan networks that would be vlan id and for gre the tunnel id
     required: false
     default: None
   router_external:
     description:
        - If 'yes', specifies that the virtual network is a external network (public).
     required: false
     default: false
   shared:
     description:
        - Whether this network is shared or not
     required: false
     default: false
   admin_state_up:
     description:
        - Whether the state should be marked as up or down
     required: false
     default: true
requirements: ["quantumclient", "neutronclient", "keystoneclient"]

'''

EXAMPLES = '''
# Create a GRE backed Quantum network with tunnel id 1 for tenant1
- quantum_network: name=t1network tenant_name=tenant1 state=present
                   provider_network_type=gre provider_segmentation_id=1
                   login_username=admin login_password=admin login_tenant_name=admin

# Create an external network
- quantum_network: name=external_network state=present
                   provider_network_type=local router_external=yes
                   login_username=admin login_password=admin login_tenant_name=admin
'''


def create_network(module, neutron, tenant_id):

    neutron.format = 'json'

    network = {
        'name':                      module.params.get('name'),
        'shared':                    module.params.get('shared'),
        'admin_state_up':            module.params.get('admin_state_up'),
    }

    if tenant_id:
        network['tenant_id'] = tenant_id

    if module.params.get('router_external'):
        network['router:external'] = module.params.get('router_external')

    if module.params['provider_network_type'] == 'local':
        network['provider:network_type'] = 'local'

    elif module.params['provider_network_type'] == 'flat':
        network['provider:network_type'] = 'flat'
        network['provider:physical_network'] = module.params['provider_physical_network']

    elif module.params['provider_network_type'] == 'gre':
        network['provider:network_type'] = 'gre'
        network['provider:segmentation_id'] = module.params['provider_segmentation_id']

    elif module.params['provider_network_type'] == 'vlan':
        network['provider:network_type'] = 'vlan'
        network['provider:physical_network'] = module.params['provider_physical_network']
        network['provider:segmentation_id'] = module.params['provider_segmentation_id']

    try:
        net = neutron.create_network({'network': network})
    except Exception, e:
        module.fail_json(msg="Error in creating network: %s" % e.message)

    return net['network']['id']


def delete_network(module, neutron, net_id):
    try:
        neutron.delete_network(net_id)
    except Exception, e:
        module.fail_json(msg="Error in deleting the network: %s" % e.message)
    return True


def main():
    argument_spec = os_argument_spec()
    argument_spec.update(dict(
        name=dict(required=True),
        tenant_name=dict(default=None),
        tenant_id=dict(default=None),
        provider_network_type=dict(default=None, choices=['local', 'vlan', 'flat', 'gre']),
        provider_physical_network=dict(default=None),
        provider_segmentation_id=dict(default=None),
        router_external=dict(default=False, type='bool'),
        shared=dict(default=False, type='bool'),
        admin_state_up=dict(default=True, type='bool'),
        state=dict(default='present', choices=['absent', 'present'])
    ))

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        mutually_exclusive=os_mutually_exclusive() + [
            ['tenant_name', 'tenant_id']
        ]
    )

    if module.params['provider_network_type'] in ['vlan', 'flat']:
        if not module.params['provider_physical_network']:
            module.fail_json(msg="For vlan and flat networks, variable "
                                 "provider_physical_network should be set.")

    if module.params['provider_network_type'] in ['vlan', 'gre']:
            if not module.params['provider_segmentation_id']:
                module.fail_json(
                    msg="For vlan & gre networks, variable "
                        "provider_segmentation_id should be set.")

    if module.params['tenant_name']:
        tenant_id = get_tenant_id(module.params['tenant_name'])
    elif module.params['tenant_id']:
        tenant_id = module.params['tenant_id']
    else:
        tenant_id = None

    neutron = get_neutron_client(module)

    network_id = get_network_id(module, module.params['name'], tenant_id,
                                neutron)

    if module.params['state'] == 'present':
        if network_id:
            module.exit_json(changed=False, result="Success", id=network_id)
        elif module.check_mode:
            module.exit_json(changed=True, result="Success")
        else:
            network_id = create_network(module, neutron, tenant_id)
            module.exit_json(changed=True, result="Created", id=network_id)

    elif module.params['state'] == 'absent':
        if not network_id:
            module.exit_json(changed=False, result="Success")
        elif module.check_mode:
            module.exit_json(changed=True, result="Success")
        else:
            delete_network(module, neutron, network_id)
            module.exit_json(changed=True, result="Deleted")


from ansible.module_utils.basic import *
from ansible.module_utils.openstack import *
if __name__ == '__main__':
    main()
