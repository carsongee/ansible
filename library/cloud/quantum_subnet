#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    try:
        from neutronclient.neutron import client
    except ImportError:
        from quantumclient.quantum import client
    from keystoneclient.v2_0 import client as ksclient
except ImportError:
    print("failed=True msg='quantumclient (or neutronclient) and keystoneclient are required'")

DOCUMENTATION = '''
---
module: quantum_subnet
version_added: "1.2"
short_description: Add/Remove floating IP from an instance
description:
   - Add or Remove a floating IP to an instance
options:
   login_username:
     description:
        - login username to authenticate to keystone
     required: true
     default: admin
   login_password:
     description:
        - Password of login user
     required: true
     default: True
   login_tenant_name:
     description:
        - The tenant name of the login user
     required: true
     default: True
   auth_url:
     description:
        - The keystone URL for authentication
     required: false
     default: 'http://127.0.0.1:35357/v2.0/'
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   network_name:
     description:
        - Name of the network to which the subnet should be attached
     required: true
     default: None
   cidr:
     description:
        - The CIDR representation of the subnet that should be assigned to the subnet
     required: true
     default: None
   tenant_name:
     description:
        - The name of the tenant for whom the subnet should be created
     required: false
     default: None
   ip_version:
     description:
        - The IP version of the subnet 4 or 6
     required: false
     default: 4
   enable_dhcp:
     description:
        - Whether DHCP should be enabled for this subnet.
     required: false
     default: true
   gateway_ip:
     description:
        - The ip that would be assigned to the gateway for this subnet
     required: false
     default: None
   dns_nameservers:
     description:
        - DNS nameservers for this subnet, comma-separated
     required: false
     default: None
   allocation_pool_start:
     description:
        - From the subnet pool the starting address from which the IP should be allocated
     required: false
     default: None
   allocation_pool_end:
     description:
        - From the subnet pool the last IP that should be assigned to the virtual machines
     required: false
     default: None
requirements: ["quantumclient", "neutronclient", "keystoneclient"]
'''

EXAMPLES = '''
# Create a subnet for a tenant with the specified subnet
- quantum_subnet: state=present login_username=admin login_password=admin
                  login_tenant_name=admin tenant_name=tenant1
                  network_name=network1 name=net1subnet cidr=192.168.0.0/24"
'''


def create_subnet(module, neutron, network_id, tenant_id):
    neutron.format = 'json'
    subnet = {
        'name': module.params['name'],
        'network_id': network_id,
        'cidr': module.params['cidr'],
        'enable_dhcp': module.params['enable_dhcp'],
        'ip_version': module.params['ip_version'],
    }

    if tenant_id:
        subnet['tenant_id'] = tenant_id

    if module.params['allocation_pool_start'] and module.params['allocation_pool_end']:
        allocation_pools = [
            {
                'start': module.params['allocation_pool_start'],
                'end':  module.params['allocation_pool_end']
            }
        ]
        subnet.update({'allocation_pools': allocation_pools})

    if module.params['gateway_ip']:
        subnet['gateway_ip'] = module.params['gateway_ip']

    if module.params['dns_nameservers']:
        subnet['dns_nameservers'] = module.params['dns_nameservers']

    try:
        new_subnet = neutron.create_subnet(dict(subnet=subnet))
    except Exception, e:
        module.fail_json(msg="Failure in creating subnet: %s" % e.message)

    return new_subnet['subnet']


def delete_subnet(module, neutron, subnet_id):
    try:
        neutron.delete_subnet(subnet_id)
    except Exception, e:
        module.fail_json(msg="Error in deleting subnet: %s" % e.message)


def main():
    argument_spec = os_argument_spec()
    argument_spec.update(dict(
        name=dict(required=True),
        network_id=dict(required=False),
        network_name=dict(required=False),
        cidr=dict(required=True),
        tenant_id=dict(default=None),
        tenant_name=dict(default=None),
        state=dict(default='present', choices=['absent', 'present']),
        ip_version=dict(default='4', choices=['4', '6']),
        enable_dhcp=dict(default='true', type='bool'),
        gateway_ip=dict(default=None),
        dns_nameservers=dict(default=None),
        
        allocation_pool_start=dict(default=None),
        allocation_pool_end=dict(default=None),
    ))

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        mutually_exclusive=os_mutually_exclusive() + [
            ['tenant_name', 'tenant_id'],
            ['network_name', 'network_id'],
        ]
    )

    neutron = get_neutron_client(module)

    # validate:
    if not module.params['network_name'] and not module.params['network_id']:
        module.fail_json(msg="either network_id or network_name is required.")

    if module.params['tenant_name']:
        tenant_id = get_tenant_id(module.params['tenant_name'])
    elif module.params['tenant_id']:
        tenant_id = module.params['tenant_id']
    else:
        tenant_id = None

    if module.params['network_name']:
        network_id = get_network(module, module.params['network_name'],
                                 neutron=neutron)['id']
    else:
        network_id = module.params['network_id']

    subnet = get_subnet(module, module.params['name'], required=False,
                        neutron=neutron)

    if module.params['state'] == 'present':
        if subnet:
            module.exit_json(changed=False, result="success", id=subnet['id'])
        elif module.check_mode:
            module.exit_json(changed=True, result="success")
        else:
            subnet = create_subnet(module, neutron, network_id, tenant_id)
            module.exit_json(changed=True, result="Created", id=subnet['id'])

    elif module.params['state'] == 'absent':
        if not subnet:
            module.exit_json(changed=False, result="success")
        elif module.check_mode:
            module.exit_json(changed=True, result="success")
        else:
            delete_subnet(module, neutron, subnet)
            module.exit_json(changed=True, result="deleted")


from ansible.module_utils.basic import *
from ansible.module_utils.openstack import *
if __name__ == '__main__':
    main()
