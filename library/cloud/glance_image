#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: glance_image
version_added: "1.2"
short_description: Add/Delete images from glance
description:
   - Add or Remove images from the glance repository.
options:
   login_username:
     description:
        - login username to authenticate to keystone
     required: true
     default: admin
   login_password:
     description:
        - Password of login user
     required: true
     default: 'yes'
   login_tenant_name:
     description:
        - The tenant name of the login user
     required: true
     default: 'yes'
   auth_url:
     description:
        - The keystone url for authentication
     required: false
     default: 'http://127.0.0.1:35357/v2.0/'
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   name:
     description:
        - Name that has to be given to the image
     required: true
     default: None
   disk_format:
     description:
        - The format of the disk that is getting uploaded
     required: false
     default: qcow2
   container_format:
     description:
        - The format of the container
     required: false
     default: bare
   owner:
     description:
        - The owner of the image
     required: false
     default: None
   min_disk:
     description:
        - The minimum disk space required to deploy this image
     required: false
     default: None
   min_ram:
     description:
        - The minimum ram required to deploy this image
     required: false
     default: None
   is_public:
     description:
        - Whether the image can be accessed publicly
     required: false
     default: 'yes'
   copy_from:
     description:
        - A url from where the image can be downloaded, mutually exclusive with file parameter
     required: false
     default: None
   timeout:
     description:
        - The time to wait for the image process to complete in seconds
     required: false
     default: 180
   file:
     description:
        - The path to the file which has to be uploaded, mutually exclusive with copy_from
     required: false
     default: None
requirements: ["glanceclient", "keystoneclient"]

'''

EXAMPLES = '''
# Upload an image from an HTTP URL
- glance_image: login_username=admin
                login_password=passme
                login_tenant_name=admin
                name=cirros
                container_format=bare
                disk_format=qcow2
                state=present
                copy_from=http:launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img
'''

import time


def glance_image_create(module, client):
    kwargs = {
        'name':             module.params.get('name'),
        'disk_format':      module.params.get('disk_format'),
        'container_format': module.params.get('container_format'),
        'owner':            module.params.get('owner'),
        'is_public':        module.params.get('is_public'),
        'copy_from':        module.params.get('copy_from'),
        'location':         module.params.get('location'),
    }

    try:
        timeout = float(module.params.get('timeout'))
        expire = time.time() + timeout
        image = client.images.create(**kwargs)
        if module.params['file']:
            image.update(data=open(module.params['file'], 'rb'))

        while time.time() < expire:
            image = client.images.get(image.id)
            if image.status == 'active':
                break
            time.sleep(5)
    except Exception, e:
        module.fail_json(msg="Error in creating image: %s" % e.message)

    if image.status == 'active':
        return image

    module.fail_json(
        msg=" The module timed out, please check manually " + image.status)


def glance_delete_image(module, client):
    try:
        for image in client.images.list():
            if image.name == module.params['name']:
                client.images.delete(image)
    except Exception, e:
        module.fail_json(msg="Error in deleting image: %s" % e.message)


def main():
    argument_spec = os_argument_spec()
    argument_spec.update(dict(
        name=dict(required=True),
        disk_format=dict(default='qcow2', choices=[
                         'aki', 'vhd', 'vmdk', 'raw', 'qcow2', 'vdi', 'iso']),
        container_format=dict(
            default='bare', choices=['aki', 'ari', 'bare', 'ovf']),
        owner=dict(default=None),
        min_disk=dict(default=None),
        min_ram=dict(default=None),
        is_public=dict(default=True),
        copy_from=dict(default=None),
        location=dict(default=None),
        timeout=dict(default=180),
        file=dict(default=None),
        state=dict(default='present', choices=['absent', 'present'])
    ))

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        mutually_exclusive=os_mutually_exclusive() + [
            ['location', 'file', 'copy_from']
        ]
    )

    glance = get_glance_client(module)

    image = get_glance_image(module, module.params['name'], required=False,
                             glance=glance)

    if module.params['state'] == 'present':
        if image:
            module.exit_json(changed=False, id=image.id, result="success")
        elif module.check_mode:
            module.exit_json(changed=True, result="To be created")
        else:
            image = glance_image_create(module, glance)
            module.exit_json(changed=True, id=image.id, result="success")

    elif module.params['state'] == 'absent':
        if not image:
            module.exit_json(changed=False, result="Success")
        elif module.check_mode:
            module.exit_json(changed=True, result="To be removed", id=image.id)
        else:
            _glance_delete_image(odule, client)
            module.exit_json(changed=True, result="removed", id=image.id)

from ansible.module_utils.basic import *
from ansible.module_utils.openstack import *
if __name__ == '__main__':
    main()
