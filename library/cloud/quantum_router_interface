#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    try:
        from neutronclient.neutron import client
    except ImportError:
        from quantumclient.quantum import client
    from keystoneclient.v2_0 import client as ksclient
except ImportError:
    print("failed=True msg='quantumclient (or neutronclient) and keystone client are required'")
DOCUMENTATION = '''
---
module: quantum_router_interface
version_added: "1.2"
short_description: Attach/Dettach a subnet's interface to a router
description:
   - Attach/Dettach a subnet interface to a router, to provide a gateway for the subnet.
options:
   login_username:
     description:
        - login username to authenticate to keystone
     required: true
     default: admin
   login_password:
     description:
        - Password of login user
     required: true
     default: 'yes'
   login_tenant_name:
     description:
        - The tenant name of the login user
     required: true
     default: 'yes'
   auth_url:
     description:
        - The keystone URL for authentication
     required: false
     default: 'http://127.0.0.1:35357/v2.0/'
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   router_name:
     description:
        - Name of the router to which the subnet's interface should be attached.
     required: true
     default: None
   subnet_name:
     description:
        - Name of the subnet to whose interface should be attached to the router.
     required: true
     default: None
   tenant_name:
     description:
        - Name of the tenant whose subnet has to be attached.
     required: false
     default: None
requirements: ["quantumclient", "keystoneclient"]
'''

EXAMPLES = '''
# Attach tenant1's subnet to the external router
- quantum_router_interface: state=present login_username=admin
                            login_password=admin
                            login_tenant_name=admin
                            tenant_name=tenant1
                            router_name=external_route
                            subnet_name=t1subnet
'''


def add_interface_router(module, neutron, router, subnet):
    try:
        neutron.add_interface_router(router['id'], {"subnet_id": subnet["id"]})
    except Exception, e:
        module.fail_json(msg="Error in adding interface to router: %s" % e.message, 
                         subnet=subnet, router=router)
    return True


def remove_interface_router(module, neutron, router_id, subnet_id):
    kwargs = {
        'subnet_id': subnet_id
    }
    try:
        neutron.remove_interface_router(router_id, kwargs)
    except Exception, e:
        module.fail_json(msg="Error in removing interface from router: %s" % e.message)
    return True


def main():
    argument_spec = os_argument_spec()
    argument_spec.update(dict(
        router_name=dict(default=None),
        router_id=dict(default=None),
        subnet_name=dict(default=None),
        subnet_id=dict(default=None),
        tenant_name=dict(default=None),
        tenant_id=dict(default=None),
        state=dict(default='present', choices=['absent', 'present']),
    ))

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        mutually_exclusive=os_mutually_exclusive() + [
            ['tenant_name', 'tenant_id'],
            ['router_name', 'router_id'],
            ['subnet_name', 'subnet_id'],
        ]
    )

    # Figure out what tenant_id to use.
    if module.params['tenant_name']:
        tenant_id = get_tenant_id(module.params['tenant_name'])
        if not tenant_id:
            module.fail_json("Tenant '%s' not found" %
                             module.params['tenant_name'])
    elif module.params['tenant_id']:
        tenant_id = module.params['tenant_id']
    else:
        tenant_id = None

    neutron = get_neutron_client(module)

    # Figure out which network to use.
    if module.params['subnet_name']:
        subnet = get_subnet(module, name=module.params['subnet_name'],
                            tenant_id=tenant_id, required=True,
                            neutron=neutron)
    elif module.params['subnet_id']:
        subnet = get_subnet(module, name=module.params['subnet_id'],
                            tenant_id=tenant_id, required=True,
                            neutron=neutron)
    else:
        module.fail_json(msg="Either subnet_name or subnet_id is required")

    # Figure out which router to use.
    if module.params['router_name']:
        router = get_router(module, name=module.params['router_name'],
                            tenant_id=tenant_id, neutron=neutron,
                            required=True)
    elif module.params['router_id']:
        router = get_router(module, id=module.params['router_id'],
                            tenant_id=tenant_id, neutron=neutron,
                            required=True)
    else:
        module.fail_json(msg="either router_id or router_name is required.")

    # If this interface is present, the router has a port on that network and
    # subnet.
    present = get_port(module, subnet['network_id'], router['id'],
                       subnet['id'], required=False, neutron=neutron)

    if module.params['state'] == 'present':
        if not subnet:
            module.fail_json(msg="When state==present, either subnet_id or "
                                 "subnet_name is required.")

        if present:
            module.exit_json(changed=False, result="Success")
        elif module.check_mode:
            module.exit_json(changed=True, result="Success")
        else:
            add_interface_router(module, neutron, router, subnet)
            module.exit_json(changed=True, result="Created")

    elif module.params['state'] == 'absent':
        if not present:
            module.exit_json(changed=False, result="Success")
        elif module.check_mode:
            module.exit_json(changed=True, result="Success")
        else:
            remove_interface_router(module, neutron, router, subnet)
            module.exit_json(changed=True, result="Deleted")


from ansible.module_utils.basic import *
from ansible.module_utils.openstack import *
if __name__ == '__main__':
    main()
